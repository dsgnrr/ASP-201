@{
    ViewData["Title"] = "Scheme";
}

<div>
    <h1 class="display-4">Схема взаємодії</h1>
</div>
<p>
    У взаємодії беруть участь декілька "гравців":<br />
    клієнт - браузер або інший споживач інформації<br />
    сервер - бекенд, який оброблює запит клієнта та повертає дані (HTML / JSON / File /...)
</p>
<p>
    Проходження запиту: 
</p>
<ul>
    <li>
        У браузері натискається посилання або вводиться URL в адресний рядок. Це
        призводить до того, що браузер формує звернення(запит) до зазначенго URL.
    </li>
    <li>
        Брузер визначає IP(локацію) сервера з заданим URL (localhost) і передає
        до нього сформований HTTP-запит
    </li>
    <li>
        Бекенд складається з двох шарів: веб-сервер та веб-застосунок (Application)
        <ul>
            <li>
                Веб-сервер це програма, яка слухає порт, приймає HTTP-запити, розділяє їх
                параметри, формує об'єкти .NET та передає їх до застосунку. За замовченням
                для ASP встановлюється IIS від Microsoft.
            </li>
            <li>
                Застосунок - це скомпільований код (DLL), зроблений з проєкту. Процес побудови
                DLL та передачі їх до IIS називається Deploy. Це пояснює чому зміни у коді
                не відразу відображаються у поведінці сайту - їх спочатку потрібно перезібрати у
                DLL та, можливо, перенести у папки серверу (IIS) - Redeploy
            </li>
        </ul>
    </li>
    <li>
        Пройшовши веб-сервер запит потрапляє у застосунок і проходить оброблення.
        Для кожного запиту сервер створює новий об'єкт(екземпляр) контроллера.
        Це робиться з міркувань безпеки - якщо перший екземпляр було створено для
        авторизованого користувача, то наступний запит від неавторизованого може
        звернутись до речей, які не мають бути доступним для нього.
        У той же час, інші об'кти не перестворюються і існують протягом всієї роботи
        застосунку. Це складає основу Scopes - часових рамок існування об'єктів:
        <ul>
            <li>Singleton - постійне існування, RequestScope - протягом одного запиту,</li>
            <li>Transient - протягом одного звернення до програмного об'єкту.</li>
        </ul>
    </li>
    <li>
        Після оброблення у контроллерах робота передається на представлення (View).
        Формат .cshtml дозволяє впроваджувати коди С# у HTML з використанням
        спеціалізованого синтаксису - Razor. Для передачі даних з контролеру до
        представлення існує спеціальні об'єкти ViewBag (старий) та ViewData.
        ViewBag - dynamic, що може змінювати склад полів під час виконання

        Дані від ViewBag: <b>@ViewBag.data</b>  <br />
        Дані від ViewData: <b>@ViewData["data"]</b> <br />
    </li>
    <li>
        Після того як представлення відпрацювало, утвоерний HTML передається
        до IIS, він "упаковує" HTML у HTTP-відповідь (response) і передає
        її до клієнта (браузера)
    </li>
</ul>